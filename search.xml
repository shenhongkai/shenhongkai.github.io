<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>iOS NSUInteger 运算问题</title>
    <url>/2022/03/21/iOS%20NSUInteger%20%E8%BF%90%E7%AE%97%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="iOS-NSUInteger-运算问题"><a href="#iOS-NSUInteger-运算问题" class="headerlink" title="iOS NSUInteger 运算问题"></a>iOS NSUInteger 运算问题</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>iOS中当NSUInteger参与运算时,一定要注意数值的取值范围。当表达式中存在有符号类型和无符号类型时全部的操做数都自动转换为无符号类型。</p>
<span id="more"></span>

<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>例如在下面场景中,数组的count是无符号数据NSUInteger,遍历中idx的单位也是无符号数据NSUInteger。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="built_in">NSArray</span> *arr1 = @[<span class="string">@&quot;a&quot;</span>];</span><br><span class="line"><span class="built_in">NSArray</span> *arr2 = @[<span class="string">@&quot;1&quot;</span>,<span class="string">@&quot;2&quot;</span>,<span class="string">@&quot;3&quot;</span>];</span><br><span class="line"></span><br><span class="line">[arr2 enumerateObjectsUsingBlock:^(<span class="type">id</span>  _Nonnull obj, <span class="built_in">NSUInteger</span> idx, <span class="type">BOOL</span> * _Nonnull stop) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((arr1.count-idx) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;大于等于0&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;小于0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;];</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果两者都是 NSInteger 有符号数据类型,那么arr1.count &#x3D; 1 , idx 分别为0,1,2, 所有(arr1.count-idx) 的值对应为1,0,-1, 所以打印结果应该为:</p>
<p>大于等于0</p>
<p>大于等于0</p>
<p>小于0</p>
<p>实际上,当arr1.count和idx的单位均为无符号数据NSUInteger时,打印结果为:<br><img src="https://raw.githubusercontent.com/shenhongkai/PicGo/main/2022-03-21-2.png" alt="2022-03-21-2"></p>
<p>从打印结果可以看到,当idx为2时,(arr1.count-idx)的结果以补码的方式转为了无符号类型的数值18446744073709551615。</p>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>有符号NSUInteger数据类型参与运算时,一定要注意数值的取值范围不能是负数,当为表达式结果为负数时,会以补码的形式转换数值结果。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>小知识</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS暗黑模式适配方案</title>
    <url>/2022/03/16/iOS%E6%9A%97%E5%A4%9C%E6%A8%A1%E5%BC%8F%E9%80%82%E9%85%8D%E5%AE%9E%E6%93%8D/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>暗黑模式适配主要是考虑三个部分</p>
<ol>
<li>图片适配</li>
<li>颜色适配</li>
<li>封装基础组件用来监听暗黑模式的变化</li>
</ol>
<span id="more"></span>


<h4 id="一、图片适配"><a href="#一、图片适配" class="headerlink" title="一、图片适配"></a>一、图片适配</h4><ul>
<li><p>使用ImageSet</p>
</li>
<li><p>打开Assets.xcassets</p>
</li>
<li><p>新建一个Image set  选择右边栏的Appearances中对应的选项适配深色模式。<br><img src="https://raw.githubusercontent.com/shenhongkai/PicGo/main/2022-03-25-1.png"></p>
</li>
<li><p>使用方法：[UIImage imageNamed:@”circle”];</p>
</li>
<li><p>当模式变化时,UIImage会动态的获取对应模式下的图片资源</p>
</li>
</ul>
<h4 id="二、颜色适配"><a href="#二、颜色适配" class="headerlink" title="二、颜色适配"></a>二、颜色适配</h4><ul>
<li><p>使用ColorSet</p>
</li>
<li><p>打开Assets.xcassets</p>
</li>
<li><p>新建一个Color set  选择右边栏的Appearances中对应的选项适配深色模式。<br><img src="https://raw.githubusercontent.com/shenhongkai/PicGo/main/2022-03-25-2.png"></p>
</li>
<li><p>使用方法：<br>self.view.backgroundColor &#x3D; [UIColor colorNamed:@”testColor”]; </p>
</li>
<li><p>同样当模式发生变化时,UIColor会动态的获取对应模式下的颜色</p>
</li>
</ul>
<h4 id="三、封装基础组件用来监听暗黑模式的变化"><a href="#三、封装基础组件用来监听暗黑模式的变化" class="headerlink" title="三、封装基础组件用来监听暗黑模式的变化"></a>三、封装基础组件用来监听暗黑模式的变化</h4><p>监听暗黑模式的变化主要是封装系统监听方法,主要分两种监听,可以根据实际情况进行选择使用。</p>
<h5 id="一-为NSObject对象添加监听回调"><a href="#一-为NSObject对象添加监听回调" class="headerlink" title="(一)为NSObject对象添加监听回调"></a>(一)为NSObject对象添加监听回调</h5><ol>
<li>利用runtime为需要监听模式变化的obj对象添加一个监听模式变化的block回调,回调参数返回当前的模式标记</li>
<li>把该obj对象加入NSHashTable表中弱持有该对象</li>
<li>提前用runtime替换系统traitCollectionDidChange:方法,在替换的方法中判断当前暗黑模式是否发生改变以及当前的模式,然后在NSHashTable表中遍历每一个保存的obj对象,并且调用第一步中为之添加的block回调</li>
<li>obj对象可以在block带着模式参数回调回来后对obj对象进行适配操作,如下:<br><img src="https://raw.githubusercontent.com/shenhongkai/PicGo/main/2022-03-25-3.png"></li>
</ol>
<h5 id="二-新建UIColor的分类监听模式的改变"><a href="#二-新建UIColor的分类监听模式的改变" class="headerlink" title="(二)新建UIColor的分类监听模式的改变"></a>(二)新建UIColor的分类监听模式的改变</h5><ol>
<li><p>建一个UIColor的分类,在分类中根据系统监听回调colorWithDynamicProvider:方法,进行颜色匹配,如下:<br><img src="https://raw.githubusercontent.com/shenhongkai/PicGo/main/2022-03-25-4.png"></p>
</li>
<li><p>使用时:<br><img src="https://raw.githubusercontent.com/shenhongkai/PicGo/main/2022-03-25-5.png"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>暗夜模式</tag>
      </tags>
  </entry>
  <entry>
    <title>git命令总结</title>
    <url>/2022/03/28/git%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>总结一下git命令,回顾一下Git reset、revert、rebase的简单使用等。</p>
<span id="more"></span>

<h3 id="Git思想"><a href="#Git思想" class="headerlink" title="Git思想"></a>Git思想</h3><p>直接记录快照，而非比较差异。和其他版本控制系统不同的是，Git存储数据时将数据看成小型的文件系统的一组快照，每次在修改文件提交更新后，它主要对当时的所有文件制作一个快照并保存到快照索引中。Git还对这一个保存过程进行了优化，也就是说当文件没有修改时，Git不会重新存储文件而是只保留一个链接指向之前存储的文件。这是Git与其他版本控制系统的重要区别。</p>
<p>近乎所有的操作都是在本地执行。Git的大多数操作都是在本地完成，当我们在没有网络或者没有×××的情况下，同样可以使用Git进行办公。因为在本地磁盘上有项目的完整历史，可以在任何时候浏览项目的历史。</p>
<p>保证数据的完整性。Git为了保证数据的完整性在存储前都会计算校验和，通过校验和来引用。校验和机制叫做SHA-1散列，也叫哈希散列。Git通过对校验和的检查可以保证数据的完整性。</p>
<p>在Git中，所以文件都是通过校验和进行查找的，而不是文件名。</p>
<h3 id="Git工作原理"><a href="#Git工作原理" class="headerlink" title="Git工作原理"></a>Git工作原理</h3><p>为了更好的理解Git，需要理解其设计原理。在Git中，文件有三种状态： 已提交（committed）,已修改（modified）和已暂存（staged）。</p>
<p>已提交： 数据已经安全的保存到本地数据库中。<br>已修改： 数据文件被修改，还没保存到数据库中。<br>已暂存： 对已经修改的文件的当前版本做了标记，包含下次提交的快照。<br>对应文件的三种状态，还引入了三个工作区域的概念： Git仓库，工作目录和暂存区域。</p>
<p>Git仓库： 用来保存项目的数据的地方。<br>工作目录：项目中某个版本独立提取出来的内容。<br>暂存区域：保存文件下次提交的信息。<br>工作流程：</p>
<p>在工作目录中修改文件。<br>暂存文件，将文件的快照放入暂存区域。<br>提交更新，找到暂存区域的文件，将快照永久存储。</p>
<h3 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在当前目录新建一个Git代码库</span><br><span class="line">$ git init</span><br><span class="line"># 新建一个目录，将其初始化为Git代码库</span><br><span class="line">$ git init [project-name]</span><br><span class="line"># 下载一个项目和它的整个代码历史</span><br><span class="line">$ git clone [url]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h3><p>Git的设置文件为.gitconfig，它可以在用户主目录下(全局配置)，也可以在项目目录下(项目配置)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示当前的Git配置</span><br><span class="line">$ git config --list</span><br><span class="line"># 编辑Git配置文件</span><br><span class="line">$ git config -e [--global]</span><br><span class="line"># 设置提交代码时的用户信息</span><br><span class="line">$ git config [--global] user.name &quot;[name]&quot;</span><br><span class="line">$ git config [--global] user.email &quot;[email address]&quot;</span><br><span class="line"># 颜色设置</span><br><span class="line">git config --global color.ui true                         # git status等命令自动着色</span><br><span class="line">git config --global color.status auto</span><br><span class="line">git config --global color.diff auto</span><br><span class="line">git config --global color.branch auto</span><br><span class="line">git config --global color.interactive auto</span><br><span class="line">git config --global --unset http.proxy                    # remove  proxy configuration on git</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="三、增加-x2F-删除文件"><a href="#三、增加-x2F-删除文件" class="headerlink" title="三、增加&#x2F;删除文件"></a>三、增加&#x2F;删除文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 添加指定文件到暂存区</span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"># 添加指定目录到暂存区，包括子目录</span><br><span class="line">$ git add [dir]</span><br><span class="line"># 添加当前目录的所有文件到暂存区</span><br><span class="line">$ git add .</span><br><span class="line"># 添加每个变化前，都会要求确认</span><br><span class="line"># 对于同一个文件的多处变化，可以实现分次提交</span><br><span class="line">$ git add -p</span><br><span class="line"># 删除工作区文件，并且将这次删除放入暂存区</span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"># 停止追踪指定文件，但该文件会保留在工作区</span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"># 改名文件，并且将这个改名放入暂存区</span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 提交暂存区到仓库区</span><br><span class="line">$ git commit -m [message]</span><br><span class="line"># 提交暂存区的指定文件到仓库区</span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"># 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class="line">$ git commit -a</span><br><span class="line"># 提交时显示所有diff信息</span><br><span class="line">$ git commit -v</span><br><span class="line"># 将add和commit合为一步</span><br><span class="line">$ git commit -am &#x27;message&#x27;</span><br><span class="line"># 使用一次新的commit，替代上一次提交</span><br><span class="line"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"># 重做上一次commit，并包括指定文件的新变化</span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 列出所有本地分支</span><br><span class="line">$ git branch</span><br><span class="line"># 列出所有远程分支</span><br><span class="line">$ git branch -r</span><br><span class="line"># 列出所有本地分支和远程分支</span><br><span class="line">$ git branch -a</span><br><span class="line"># 新建一个分支，但依然停留在当前分支</span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"># 新建一个分支，并切换到该分支</span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"># 新建一个分支，指向指定commit</span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"># 新建一个分支，与指定的远程分支建立追踪关系</span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"># 切换到指定分支，并更新工作区</span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"># 切换到上一个分支</span><br><span class="line">$ git checkout -</span><br><span class="line"># 建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class="line">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"># 合并指定分支到当前分支</span><br><span class="line">$ git merge [branch]</span><br><span class="line"># 选择一个commit，合并进当前分支</span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"># 删除分支</span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"># 删除远程分支</span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br><span class="line"># 检出版本v2.0</span><br><span class="line">$ git checkout v2.0</span><br><span class="line"># 从远程分支develop创建新本地分支devel并检出</span><br><span class="line">$ git checkout -b devel origin/develop</span><br><span class="line"># 检出head版本的README文件（可用于修改错误回退）</span><br><span class="line">git checkout -- README </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 列出所有tag</span><br><span class="line">$ git tag</span><br><span class="line"># 新建一个tag在当前commit</span><br><span class="line">$ git tag [tag]</span><br><span class="line"># 新建一个tag在指定commit</span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"># 删除本地tag</span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"># 删除远程tag</span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"># 查看tag信息</span><br><span class="line">$ git show [tag]</span><br><span class="line"># 提交指定tag</span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"># 提交所有tag</span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"># 新建一个分支，指向某个tag</span><br><span class="line">$ git checkout -b [branch] [tag]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示有变更的文件</span><br><span class="line">$ git status</span><br><span class="line"># 显示当前分支的版本历史</span><br><span class="line">$ git log</span><br><span class="line"># 显示commit历史，以及每次commit发生变更的文件</span><br><span class="line">$ git log --stat</span><br><span class="line"># 搜索提交历史，根据关键词</span><br><span class="line">$ git log -S [keyword]</span><br><span class="line"># 显示某个commit之后的所有变动，每个commit占据一行</span><br><span class="line">$ git log [tag] HEAD --pretty=format:%s</span><br><span class="line"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span><br><span class="line">$ git log [tag] HEAD --grep feature</span><br><span class="line"># 显示某个文件的版本历史，包括文件改名</span><br><span class="line">$ git log --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"># 显示指定文件相关的每一次diff</span><br><span class="line">$ git log -p [file]</span><br><span class="line"># 显示过去5次提交</span><br><span class="line">$ git log -5 --pretty --oneline</span><br><span class="line"># 显示所有提交过的用户，按提交次数排序</span><br><span class="line">$ git shortlog -sn</span><br><span class="line"># 显示指定文件是什么人在什么时间修改过</span><br><span class="line">$ git blame [file]</span><br><span class="line"># 显示暂存区和工作区的差异</span><br><span class="line">$ git diff</span><br><span class="line"># 显示暂存区和上一个commit的差异</span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"># 显示工作区与当前分支最新commit之间的差异</span><br><span class="line">$ git diff HEAD</span><br><span class="line"># 显示两次提交之间的差异</span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"># 显示今天你写了多少行代码</span><br><span class="line">$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;</span><br><span class="line"># 显示某次提交的元数据和内容变化</span><br><span class="line">$ git show [commit]</span><br><span class="line"># 显示某次提交发生变化的文件</span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"># 显示某次提交时，某个文件的内容</span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"># 显示当前分支的最近几次提交</span><br><span class="line">$ git reflog</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 下载远程仓库的所有变动</span><br><span class="line">$ git fetch [remote]</span><br><span class="line"># 显示所有远程仓库</span><br><span class="line">$ git remote -v</span><br><span class="line"># 显示某个远程仓库的信息</span><br><span class="line">$ git remote show [remote]</span><br><span class="line"># 增加一个新的远程仓库，并命名</span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"># 取回远程仓库的变化，并与本地分支合并</span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"># 上传本地指定分支到远程仓库</span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"># 强行推送当前分支到远程仓库，即使有冲突</span><br><span class="line">$ git push [remote] --force</span><br><span class="line"># 推送所有分支到远程仓库</span><br><span class="line">$ git push [remote] --all</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 恢复暂存区的指定文件到工作区</span><br><span class="line">$ git checkout [file]</span><br><span class="line"># 恢复某个commit的指定文件到暂存区和工作区</span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"># 恢复暂存区的所有文件到工作区</span><br><span class="line">$ git checkout .</span><br><span class="line"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><br><span class="line">$ git reset [file]</span><br><span class="line"># 重置暂存区与工作区，与上一次commit保持一致</span><br><span class="line">$ git reset --hard</span><br><span class="line"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br><span class="line">$ git reset [commit]</span><br><span class="line"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"># 新建一个commit，用来撤销指定commit</span><br><span class="line"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br><span class="line">$ git revert [commit]</span><br><span class="line"># 暂时将未提交的变化移除，稍后再移入</span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init                                                  # 初始化本地git仓库（创建新仓库）</span><br><span class="line">git config --global user.name &quot;xxx&quot;                       # 配置用户名</span><br><span class="line">git config --global user.email &quot;xxx@xxx.com&quot;              # 配置邮件</span><br><span class="line">git config --global color.ui true                         # git status等命令自动着色</span><br><span class="line">git config --global color.status auto</span><br><span class="line">git config --global color.diff auto</span><br><span class="line">git config --global color.branch auto</span><br><span class="line">git config --global color.interactive auto</span><br><span class="line">git config --global --unset http.proxy                    # remove  proxy configuration on git</span><br><span class="line">git clone git+ssh://git@192.168.53.168/VT.git             # clone远程仓库</span><br><span class="line">git status                                                # 查看当前版本状态（是否修改）</span><br><span class="line">git add xyz                                               # 添加xyz文件至index</span><br><span class="line">git add .                                                 # 增加当前子目录下所有更改过的文件至index</span><br><span class="line">git commit -m &#x27;xxx&#x27;                                       # 提交</span><br><span class="line">git commit --amend -m &#x27;xxx&#x27;                               # 合并上一次提交（用于反复修改）</span><br><span class="line">git commit -am &#x27;xxx&#x27;                                      # 将add和commit合为一步</span><br><span class="line">git rm xxx                                                # 删除index中的文件</span><br><span class="line">git rm -r *                                               # 递归删除</span><br><span class="line">git log                                                   # 显示提交日志</span><br><span class="line">git log -1                                                # 显示1行日志 -n为n行</span><br><span class="line">git log -5</span><br><span class="line">git log --stat                                            # 显示提交日志及相关变动文件</span><br><span class="line">git log -p -m</span><br><span class="line">git show dfb02e6e4f2f7b573337763e5c0013802e392818         # 显示某个提交的详细内容</span><br><span class="line">git show dfb02                                            # 可只用commitid的前几位</span><br><span class="line">git show HEAD                                             # 显示HEAD提交日志</span><br><span class="line">git show HEAD^                                            # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本</span><br><span class="line">git tag                                                   # 显示已存在的tag</span><br><span class="line">git tag -a v2.0 -m &#x27;xxx&#x27;                                  # 增加v2.0的tag</span><br><span class="line">git show v2.0                                             # 显示v2.0的日志及详细内容</span><br><span class="line">git log v2.0                                              # 显示v2.0的日志</span><br><span class="line">git diff                                                  # 显示所有未添加至index的变更</span><br><span class="line">git diff --cached                                         # 显示所有已添加index但还未commit的变更</span><br><span class="line">git diff HEAD^                                            # 比较与上一个版本的差异</span><br><span class="line">git diff HEAD -- ./lib                                    # 比较与HEAD版本lib目录的差异</span><br><span class="line">git diff origin/master..master                            # 比较远程分支master上有本地分支master上没有的</span><br><span class="line">git diff origin/master..master --stat                     # 只显示差异的文件，不显示具体内容</span><br><span class="line">git remote add origin git+ssh://git@192.168.53.168/VT.git # 增加远程定义（用于push/pull/fetch）</span><br><span class="line">git branch                                                # 显示本地分支</span><br><span class="line">git branch --contains 50089                               # 显示包含提交50089的分支</span><br><span class="line">git branch -a                                             # 显示所有分支</span><br><span class="line">git branch -r                                             # 显示所有原创分支</span><br><span class="line">git branch --merged                                       # 显示所有已合并到当前分支的分支</span><br><span class="line">git branch --no-merged                                    # 显示所有未合并到当前分支的分支</span><br><span class="line">git branch -m master master_copy                          # 本地分支改名</span><br><span class="line">git checkout -b master_copy                               # 从当前分支创建新分支master_copy并检出</span><br><span class="line">git checkout -b master master_copy                        # 上面的完整版</span><br><span class="line">git checkout features/performance                         # 检出已存在的features/performance分支</span><br><span class="line">git checkout --track hotfixes/BJVEP933                    # 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支</span><br><span class="line">git checkout v2.0                                         # 检出版本v2.0</span><br><span class="line">git checkout -b devel origin/develop                      # 从远程分支develop创建新本地分支devel并检出</span><br><span class="line">git checkout -- README                                    # 检出head版本的README文件（可用于修改错误回退）</span><br><span class="line">git merge origin/master                                   # 合并远程master分支至当前分支</span><br><span class="line">git cherry-pick ff44785404a8e                             # 合并提交ff44785404a8e的修改</span><br><span class="line">git push origin master                                    # 将当前分支push到远程master分支</span><br><span class="line">git push origin :hotfixes/BJVEP933                        # 删除远程仓库的hotfixes/BJVEP933分支</span><br><span class="line">git push --tags                                           # 把所有tag推送到远程仓库</span><br><span class="line">git fetch                                                 # 获取所有远程分支（不更新本地分支，另需merge）</span><br><span class="line">git fetch --prune                                         # 获取所有原创分支并清除服务器上已删掉的分支</span><br><span class="line">git pull origin master                                    # 获取远程分支master并merge到当前分支</span><br><span class="line">git mv README README2                                     # 重命名文件README为README2</span><br><span class="line">git reset --hard HEAD                                     # 将当前版本重置为HEAD（通常用于merge失败回退）</span><br><span class="line">git rebase</span><br><span class="line">git branch -d hotfixes/BJVEP933                           # 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）</span><br><span class="line">git branch -D hotfixes/BJVEP933                           # 强制删除分支hotfixes/BJVEP933</span><br><span class="line">git ls-files                                              # 列出git index包含的文件</span><br><span class="line">git show-branch                                           # 图示当前分支历史</span><br><span class="line">git show-branch --all                                     # 图示所有分支历史</span><br><span class="line">git whatchanged                                           # 显示提交历史对应的文件修改</span><br><span class="line">git revert dfb02e6e4f2f7b573337763e5c0013802e392818       # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818</span><br><span class="line">git ls-tree HEAD                                          # 内部命令：显示某个git对象</span><br><span class="line">git rev-parse v2.0                                        # 内部命令：显示某个ref对于的SHA1 HASH</span><br><span class="line">git reflog                                                # 显示所有提交，包括孤立节点</span><br><span class="line">git show HEAD@&#123;5&#125;</span><br><span class="line">git show master@&#123;yesterday&#125;                               # 显示master分支昨天的状态</span><br><span class="line">git log --pretty=format:&#x27;%h %s&#x27; --graph                   # 图示提交日志</span><br><span class="line">git show HEAD~3</span><br><span class="line">git show -s --pretty=raw 2be7fcb476</span><br><span class="line">git stash                                                 # 暂存当前修改，将所有至为HEAD状态</span><br><span class="line">git stash list                                            # 查看所有暂存</span><br><span class="line">git stash show -p stash@&#123;0&#125;                               # 参考第一次暂存</span><br><span class="line">git stash apply stash@&#123;0&#125;                                 # 应用第一次暂存</span><br><span class="line">git grep &quot;delete from&quot;                                    # 文件中搜索文本“delete from”</span><br><span class="line">git grep -e &#x27;#define&#x27; --and -e SORT_DIRENT</span><br><span class="line">git gc</span><br><span class="line">git fsck</span><br><span class="line"># 生成一个可供发布的压缩包</span><br><span class="line">$ git archive</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="十一-、git-rebase"><a href="#十一-、git-rebase" class="headerlink" title="十一 、git rebase"></a>十一 、git rebase</h3><h4 id="Rebase-场景一：合并多次提交纪录"><a href="#Rebase-场景一：合并多次提交纪录" class="headerlink" title="Rebase 场景一：合并多次提交纪录"></a>Rebase 场景一：合并多次提交纪录</h4><p> 1.我们来合并最近的 4 次提交纪录，执行：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rebase -i HEAD~4</span><br></pre></td></tr></table></figure>

<p> 2.这时候，会自动进入 vi 编辑模式：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> s cacc52da add: qrcode</span><br><span class="line">s f072ef48 update: indexeddb hack</span><br><span class="line">s 4e84901a feat: add indexedDB floder</span><br><span class="line">s 8f33126c feat: add test2.js</span><br><span class="line"></span><br><span class="line"># Rebase 5f2452b2..8f33126c onto 5f2452b2 (4 commands)</span><br><span class="line">#</span><br><span class="line"># Commands:</span><br><span class="line"># p, pick = use commit</span><br><span class="line"># r, reword = use commit, but edit the commit message</span><br><span class="line"># e, edit = use commit, but stop for amending</span><br><span class="line"># s, squash = use commit, but meld into previous commit</span><br><span class="line"># f, fixup = like &quot;squash&quot;, but discard this commit&#x27;s log message</span><br><span class="line"># x, exec = run command (the rest of the line) using shell</span><br><span class="line"># d, drop = remove commit</span><br><span class="line">#</span><br><span class="line"># These lines can be re-ordered; they are executed from top to bottom.</span><br><span class="line">#</span><br><span class="line"># If you remove a line here THAT COMMIT WILL BE LOST.</span><br><span class="line">#</span><br><span class="line"># However, if you remove everything, the rebase will be aborted.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> 按照如上命令来修改你的提交纪录：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s cacc52da add: qrcode</span><br><span class="line">s f072ef48 update: indexeddb hack</span><br><span class="line">s 4e84901a feat: add indexedDB floder</span><br><span class="line">p 8f33126c feat: add test2.js</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> 3.如果保存的时候，你碰到了这个错误：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">error: cannot &#x27;squash&#x27; without a previous commit</span><br></pre></td></tr></table></figure>

<p>注意不要合并先前提交的东西，也就是已经提交远程分支的纪录。</p>
<p>4.如果你异常退出了 vi 窗口，不要紧张：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rebase --edit-todo</span><br></pre></td></tr></table></figure>

<p>这时候会一直处在这个编辑的模式里，我们可以回去继续编辑，修改完保存一下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rebase --continue</span><br></pre></td></tr></table></figure>

<p>5.查看结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure>

<h4 id="Rebase-场景二：分支合并"><a href="#Rebase-场景二：分支合并" class="headerlink" title="Rebase 场景二：分支合并"></a>Rebase 场景二：分支合并</h4><p>1.我们先从 master 分支切出一个 dev 分支，进行开发：<br><img src="https://raw.githubusercontent.com/shenhongkai/PicGo/main/2022-03-28-1.png"></p>
<p>2.这时候，你的同事完成了一次 hotfix，并合并入了 master 分支，此时 master 已经领先于你的 feature1 分支了：<br><img src="https://raw.githubusercontent.com/shenhongkai/PicGo/main/2022-03-28-2.png"></p>
<p>3.恰巧，我们想要同步 master 分支的改动，首先想到了 merge，执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git:(feature1) git merge master</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/shenhongkai/PicGo/main/2022-03-28-3.png"></p>
<p>图中绿色的点就是我们合并之后的结果，执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git:(feature1) git log</span><br></pre></td></tr></table></figure>
<p>就会在记录里发现一些 merge 的信息，但是我们觉得这样污染了 commit 记录，想要保持一份干净的 commit，怎么办呢？这时候，git rebase 就派上用场了。</p>
<p>4.让我们来试试 git rebase ，先回退到同事 hotfix 后合并 master 的步骤：<br><img src="https://raw.githubusercontent.com/shenhongkai/PicGo/main/2022-03-28-2.png"></p>
<p>5.使用 rebase 后来看看结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git:(feature1) git rebase master</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里补充一点：rebase 做了什么操作呢？</p>
</blockquote>
<p>首先，git 会把 feature1 分支里面的每个 commit 取消掉；<br>其次，把上面的操作临时保存成 patch 文件，存在 .git&#x2F;rebase 目录下；<br>然后，把 feature1 分支更新到最新的 master 分支；<br>最后，把上面保存的 patch 文件应用到 feature1 分支上；</p>
<p><img src="https://raw.githubusercontent.com/shenhongkai/PicGo/main/2022-03-28-5.png"></p>
<p>从 commit 记录我们可以看出来，feature1 分支是基于 hotfix 合并后的 master ，自然而然的成为了最领先的分支，而且没有 merge 的 commit 记录，是不是感觉很舒服了。</p>
<p>6.在 rebase 的过程中，也许会出现冲突 conflict。在这种情况，git 会停止 rebase 并会让你去解决冲突。在解决完冲突后，用 git add 命令去更新这些内容。</p>
<blockquote>
<p>注意，你无需执行 git-commit，只要执行 continue</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rebase --continue</span><br></pre></td></tr></table></figure>

<p>这样 git 会继续应用余下的 patch 补丁文件。</p>
<p>7.在任何时候，我们都可以用 –abort 参数来终止 rebase 的行动，并且分支会回到 rebase 开始前的状态。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rebase —abort</span><br></pre></td></tr></table></figure>
<h4 id="三、为什么会是危险操作？"><a href="#三、为什么会是危险操作？" class="headerlink" title="三、为什么会是危险操作？"></a>三、为什么会是危险操作？</h4><p>根据上文来看，git-rebase 很完美，解决了我们的两个问题：<br>1.合并 commit 记录，保持分支整洁；<br>2.相比 merge 来说会减少分支合并的记录；</p>
<p>如果你提交了代码到远程，提交前是这样的：<br><img src="https://raw.githubusercontent.com/shenhongkai/PicGo/main/2022-03-28-2.png"></p>
<p>提交后远程分支变成了这样：<br><img src="https://raw.githubusercontent.com/shenhongkai/PicGo/main/2022-03-28-5.png"></p>
<p>而此时你的同事也在 feature1 上开发，他的分支依然还是：</p>
<p><img src="https://raw.githubusercontent.com/shenhongkai/PicGo/main/2022-03-28-6.png"></p>
<p>那么当他 pull 远程 master 的时候，就会有丢失提交纪录。这就是为什么我们经常听到有人说 git rebase 是一个危险命令，因为它改变了历史，我们应该谨慎使用。</p>
<blockquote>
<p>除非你可以肯定该 feature1 分支只有你自己使用，否则请谨慎操作。</p>
<p>结论：只要你的分支上需要 rebase 的所有 commits 历史还没有被 push 过，就可以安全地使用 git-rebase来操作。</p>
</blockquote>
<h3 id="十二、git-rebase-后找回消失的commit"><a href="#十二、git-rebase-后找回消失的commit" class="headerlink" title="十二、git rebase 后找回消失的commit"></a>十二、git rebase 后找回消失的commit</h3><p>在使用Git的过程中，有时候会因为一些误操作，比如reset、rebase、merge等。特别是在Commit之后又执行了git reset –hard HEAD强制回滚本地记录以及文件到服务器版本，导致本地做的修改全部恢复到Git当前分支的服务器版本，同时自己的Commmit记录也消失了。碰到这种情况，不要慌，我们在Git上做的任何操作都只是在原来之前的操作上做修改，并且会被记录下来保存，也就是说无论你做了什么，对于Git来说都可以进行回滚操作。</p>
<p>reflog : reference logs</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure>

<h4 id="找回Commit"><a href="#找回Commit" class="headerlink" title="找回Commit"></a>找回Commit</h4><p>通过以下例子来了解下具体怎么回滚：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git init</span><br><span class="line">$ touch foo.txt</span><br><span class="line">$ echo &#x27;test data&#x27; &gt;&gt; foo.txt</span><br><span class="line">$ git add foo.txt</span><br><span class="line">$ git commit -m &quot;initial commit&quot;</span><br><span class="line"> </span><br><span class="line">$ echo &#x27;new data&#x27; &gt;&gt; foo.txt</span><br><span class="line">$ git commit -a -m &quot;more stuff added to foo&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>你现在看git的历史记录，你可以看到两次提交：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git log</span><br><span class="line">* 98abc5a (HEAD, master) more stuff added to foo</span><br><span class="line">* b7057a9 initial commit</span><br></pre></td></tr></table></figure>
<p>现在让我们来重置回第一次提交的状态：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git reset --hard b7057a9</span><br><span class="line">$ git log</span><br><span class="line">* b7057a9 (HEAD, master) initial commit</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这看起来我们是丢掉了我们第二次的提交，本地的修改也消失了，没有办法找回来了。但是 reflog 就是用来解决这个问题的。简单的说，它会记录所有HEAD的历史，也就是说当你做 reset，checkout等操作的时候，这些操作会被记录在reflog中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git reflog</span><br><span class="line">b7057a9 HEAD@&#123;0&#125;: reset: moving to b7057a9</span><br><span class="line">98abc5a HEAD@&#123;1&#125;: commit: more stuff added to foo</span><br><span class="line">b7057a9 HEAD@&#123;2&#125;: commit (initial): initial commit</span><br></pre></td></tr></table></figure>

<p>所以，我们要找回我们第二commit，只需要做如下操作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git reset --hard 98abc5a</span><br></pre></td></tr></table></figure>
<p>再来看一下 git 记录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git log</span><br><span class="line">* 98abc5a (HEAD, master) more stuff added to foo</span><br><span class="line">* b7057a9 initial commit</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>PS:这里在提一下另一个找回Commit的操作git cherry-pick 98abc5a,这个操作与上面的reset操作区别在于后者只是单纯的提取98abc5a这个Commit进行回滚，如果在b7057a9和98abc5a之间还有其他的Commit操作，则会忽略中间的这些Commit做的修改，所以应用这个命令有可能会文件的冲突</p>
</blockquote>
<h3 id="十三、git-reset-和-git-revert"><a href="#十三、git-reset-和-git-revert" class="headerlink" title="十三、git reset 和 git revert"></a>十三、git reset 和 git revert</h3><p>总结</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. git revert 后会多出一条commit，这里可进行回撤操作</span><br><span class="line">2. git reset 直接把之前 commit 删掉，非 git reset --hard 的操作是不会删掉修改代码，如果远程已经有之前代码，需要强推 git push -f</span><br></pre></td></tr></table></figure>
<p>git reset参数定义 <a href="https://git-scm.com/docs/git-reset">具体见官网</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--soft 回退后a分支修改的代码被保留并标记为add的状态（git status 是绿色的状态）</span><br><span class="line">--mixed 重置索引，但不重置工作树，更改后的文件标记为未提交（add）的状态。默认操作。</span><br><span class="line">--hard 重置索引和工作树，并且a分支修改的所有文件和中间的提交，没提交的代码都被丢弃了。</span><br><span class="line">--merge 和--hard类似，只不过如果在执行reset命令之前你有改动一些文件并且未提交，merge会保留你的这些修改，hard则不会。【注：如果你的这些修改add过或commit过，merge和hard都将删除你的提交】</span><br><span class="line">--keep 和--hard类似，执行reset之前改动文件如果是a分支修改了的，会提示你修改了相同的文件，不能合并。如果不是a分支修改的文件，会移除缓存区。git status还是可以看到保持了这些修改。</span><br></pre></td></tr></table></figure>

<p>区别</p>
<blockquote>
<p>1.git revert是用一次新的commit来回滚之前的commit，git reset是直接删除指定的commit。<br>这个很好理解，在刚才的操作中我们看日志已经可以看到这个现象。<br>git reset操作之后，我们查看上面例子的network已经可以看到network中只有commit 1,分支a和合并分支后的commit 3都消失了；<br>git revert操作之后，network中还是可以看到a分支和合并a分支的操作，只不过在其基础上又增加了一个revert的commit而已。</p>
</blockquote>
<blockquote>
<p>2.git reset 是把HEAD向后移动了一下，而git revert是HEAD继续前进，只是新的commit的内容和要revert的内容正好相反，能够抵消要被revert的内容。<br>这个也是可以清晰明了的看到，我就不做过多的解释了</p>
</blockquote>
<blockquote>
<p>3.在回滚这一操作上看，效果差不多。但是在日后继续merge以前的老版本时有区别。因为git revert是用一次逆向的commit“中和”之前的提交，因此日后合并老的branch时，导致这部分改变不会再次出现，但是git reset是直接把某些commit在某个branch上删除，因而和老的branch再次merge时，这些被回滚的commit应该还会被引入。</p>
</blockquote>
<p>参考:</p>
<p><a href="https://blog.51cto.com/u_13533483/2057387">Git &amp; CocoaPods &amp; 私有化，你不得不知的组件化基础！</a></p>
<p><a href="https://segmentfault.com/a/1190000039147662">Git常用命令，总结的很全了！</a></p>
<p><a href="http://jartto.wang/2018/12/11/git-rebase/">彻底搞懂 Git-Rebase</a></p>
<p><a href="https://blog.csdn.net/weixin_30287169/article/details/96843608?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_aa&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_aa&utm_relevant_index=2">找回Git中丢失的Commit</a></p>
<p><a href="https://juejin.cn/post/6844903614767448072">git reset 和 git revert</a></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>回顾总结</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 关键字</title>
    <url>/2022/04/14/iOS%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    <content><![CDATA[<h3 id="iOS-关键字"><a href="#iOS-关键字" class="headerlink" title="iOS 关键字"></a>iOS 关键字</h3><p>总结: strong、copy、weak、assign、nonatomic、atomic、@synthesize、 @dynamic、 extern、 static、 const 等</p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><span id="more"></span>











]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>小知识</tag>
        <tag>关键字</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS RAC+MVVM 总结回顾</title>
    <url>/2022/06/28/RAC-MVVM/</url>
    <content><![CDATA[<h3 id="iOS-RAC-MVVM-总结回顾"><a href="#iOS-RAC-MVVM-总结回顾" class="headerlink" title="iOS RAC+MVVM 总结回顾"></a>iOS RAC+MVVM 总结回顾</h3><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h4 id="RAC在iOS的实际开发中确实是一件有力的武器，此文将从以下几方面讲解"><a href="#RAC在iOS的实际开发中确实是一件有力的武器，此文将从以下几方面讲解" class="headerlink" title="RAC在iOS的实际开发中确实是一件有力的武器，此文将从以下几方面讲解"></a>RAC在iOS的实际开发中确实是一件有力的武器，此文将从以下几方面讲解</h4><ul>
<li>RACSignal</li>
<li>RACSubject</li>
<li>RACSequence</li>
<li>RACMulticastConnection</li>
<li>RACCommand</li>
<li>RAC常用宏</li>
<li>RAC-bind</li>
<li>RAC-过滤</li>
<li>RAC-映射</li>
<li>RAC-组合</li>
<li>RAC+MVVM-网络请求</li>
</ul>
<span id="more"></span>

<h4 id="RACSignal"><a href="#RACSignal" class="headerlink" title="RACSignal"></a>RACSignal</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.创建信号</span></span><br><span class="line">RACSignal *signal = [RACSignal createSignal:^RACDisposable *(<span class="type">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line"><span class="comment">// 3.发送信号</span></span><br><span class="line">[subscriber sendNext:<span class="string">@&quot;ws&quot;</span>];</span><br><span class="line"><span class="comment">// 4.取消信号，如果信号想要被取消，就必须返回一个RACDisposable</span></span><br><span class="line"><span class="comment">// 信号什么时候被取消：1.自动取消，当一个信号的订阅者被销毁的时候机会自动取消订阅，2.手动取消，</span></span><br><span class="line"><span class="comment">//block什么时候调用：一旦一个信号被取消订阅就会调用</span></span><br><span class="line"><span class="comment">//block作用：当信号被取消时用于清空一些资源</span></span><br><span class="line"><span class="keyword">return</span> [RACDisposable disposableWithBlock:^&#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;取消订阅&quot;</span>);</span><br><span class="line">&#125;];</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">// 2. 订阅信号</span></span><br><span class="line"><span class="comment">//subscribeNext</span></span><br><span class="line"><span class="comment">// 把nextBlock保存到订阅者里面</span></span><br><span class="line"><span class="comment">// 只要订阅信号就会返回一个取消订阅信号的类</span></span><br><span class="line">RACDisposable *disposable = [signal subscribeNext:^(<span class="type">id</span> x) &#123;</span><br><span class="line"><span class="comment">// block的调用时刻：只要信号内部发出数据就会调用这个block</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;======%@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">// 取消订阅</span></span><br><span class="line">[disposable dispose];</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>总结</strong></p>
<ul>
<li>.核心：信号类</li>
<li>.信号类的作用：只要有数据改变就会把数据包装成信号传递出去</li>
<li>.只要有数据改变就会有信号发出</li>
<li>.数据发出，并不是信号类发出，信号类不能发送数据</li>
<li>.使用方法：</li>
<li>.创建信号</li>
<li>.订阅信号</li>
<li>.实现思路：</li>
<li>.当一个信号被订阅，创建订阅者，并把nextBlock保存到订阅者里面。</li>
<li>.创建的时候会返回 [RACDynamicSignal createSignal:didSubscribe];</li>
<li>.调用RACDynamicSignal的didSubscribe</li>
<li>.发送信号[subscriber sendNext:value];</li>
<li>.拿到订阅者的nextBlock调用</li>
</ul>
<p>*&#x2F;</p>
<h4 id="RACSubject"><a href="#RACSubject" class="headerlink" title="RACSubject"></a>RACSubject</h4><p>RACSubject 在使用中我们可以完全代替代理，代码简介方法。具体代码请看demo中的RACSubject。</p>
<p><strong>总结</strong></p>
<p>我们完全可以用RACSubject代替代理&#x2F;通知，确实方便许多<br>这里我们点击TwoViewController的pop的时候 将字符串”ws”传给了ViewController的button的title。</p>
<p>步骤：</p>
<ul>
<li>1.创建信号<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">RACSubject *subject = [RACSubject subject];</span><br></pre></td></tr></table></figure></li>
<li>2.订阅信号<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[subject subscribeNext:^(<span class="type">id</span> x) &#123;</span><br><span class="line"><span class="comment">// block:当有数据发出的时候就会调用</span></span><br><span class="line"><span class="comment">// block:处理数据</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,x);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure></li>
<li>3.发送信号<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[subject sendNext:value];</span><br></pre></td></tr></table></figure></li>
<li>注意<br>RACSubject和RACReplaySubject的区别<br>RACSubject必须要先订阅信号之后才能发送信号， 而RACReplaySubject可以先发送信号后订阅.<br>RACSubject 代码中体现为：先走TwoViewController的sendNext，后走ViewController的subscribeNext订阅<br>RACReplaySubject 代码中体现为：先走ViewController的subscribeNext订阅，后走TwoViewController的sendNext<br>可按实际情况各取所需。</li>
</ul>
<h4 id="RACSequence"><a href="#RACSequence" class="headerlink" title="RACSequence"></a>RACSequence</h4><p>使用场景—： 可以快速高效的遍历数组和字典。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *path = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@&quot;flags.plist&quot;</span> ofType:<span class="literal">nil</span>];</span><br><span class="line"><span class="built_in">NSArray</span> *dictArr = [<span class="built_in">NSArray</span> arrayWithContentsOfFile:path];</span><br><span class="line">[dictArr.rac_sequence.signal subscribeNext:^(<span class="type">id</span> x) &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, x);</span><br><span class="line">&#125; error:^(<span class="built_in">NSError</span> *error) &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;===error===&quot;</span>);</span><br><span class="line">&#125; completed:^&#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;ok---完毕&quot;</span>);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">也可以使用宏</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSDictionary</span> *dict = @&#123;<span class="string">@&quot;key&quot;</span>:@<span class="number">1</span>, <span class="string">@&quot;key2&quot;</span>:@<span class="number">2</span>&#125;;</span><br><span class="line">[dict.rac_sequence.signal subscribeNext:^(<span class="type">id</span> x) &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, x);</span><br><span class="line"><span class="built_in">NSString</span> *key = x[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">NSString</span> *value = x[<span class="number">1</span>];</span><br><span class="line"><span class="comment">// RACTupleUnpack宏：专门用来解析元组</span></span><br><span class="line"><span class="comment">// RACTupleUnpack 等会右边：需要解析的元组 宏的参数，填解析的什么样数据</span></span><br><span class="line"><span class="comment">// 元组里面有几个值，宏的参数就必须填几个</span></span><br><span class="line">RACTupleUnpack(<span class="built_in">NSString</span> *key, <span class="built_in">NSString</span> *value) = x;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@ %@&quot;</span>, key, value);</span><br><span class="line">&#125; error:^(<span class="built_in">NSError</span> *error) &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;===error&quot;</span>);</span><br><span class="line">&#125; completed:^&#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;-----ok---完毕&quot;</span>);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="RACMulticastConnection"><a href="#RACMulticastConnection" class="headerlink" title="RACMulticastConnection"></a>RACMulticastConnection</h4><p>当有多个订阅者，但是我们只想发送一个信号的时候怎么办？这时我们就可以用RACMulticastConnection，来实现。代码示例如下</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通写法, 这样的缺点是：没订阅一次信号就得重新创建并发送请求，这样很不友好</span></span><br><span class="line">RACSignal *signal = [RACSignal createSignal:^RACDisposable *(<span class="type">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line"><span class="comment">// didSubscribeblock中的代码都统称为副作用。</span></span><br><span class="line"><span class="comment">// 发送请求---比如afn</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;发送请求啦&quot;</span>);</span><br><span class="line"><span class="comment">// 发送信号</span></span><br><span class="line">[subscriber sendNext:<span class="string">@&quot;ws&quot;</span>];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;];</span><br><span class="line">[signal subscribeNext:^(<span class="type">id</span> x) &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line">[signal subscribeNext:^(<span class="type">id</span> x) &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line">[signal subscribeNext:^(<span class="type">id</span> x) &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 比较好的做法。 使用RACMulticastConnection，无论有多少个订阅者，无论订阅多少次，我只发送一个。</span></span><br><span class="line"><span class="comment">// 1.发送请求，用一个信号内包装，不管有多少个订阅者，只想发一次请求</span></span><br><span class="line">RACSignal *signal = [RACSignal createSignal:^RACDisposable *(<span class="type">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;发送请求啦&quot;</span>);</span><br><span class="line"><span class="comment">// 发送信号</span></span><br><span class="line">[subscriber sendNext:<span class="string">@&quot;ws&quot;</span>];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">//2. 创建连接类</span></span><br><span class="line">RACMulticastConnection *connection = [signal publish];</span><br><span class="line">[connection.signal subscribeNext:^(<span class="type">id</span> x) &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line">[connection.signal subscribeNext:^(<span class="type">id</span> x) &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line">[connection.signal subscribeNext:^(<span class="type">id</span> x) &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">//3. 连接。只有连接了才会把信号源变为热信号</span></span><br><span class="line">[connection connect];</span><br></pre></td></tr></table></figure>


<h4 id="RACCommand"><a href="#RACCommand" class="headerlink" title="RACCommand"></a>RACCommand</h4><ul>
<li>RACCommand:RAC中用于处理事件的类，可以把事件如何处理，事件中的数据如何传递，包装到这个类中，他可以很方便的监控事件的执行过程，比如看事件有没有执行完毕</li>
<li>使用场景：监听按钮点击，网络请求</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通做法</span></span><br><span class="line"><span class="comment">// RACCommand: 处理事件</span></span><br><span class="line"><span class="comment">// 不能返回空的信号</span></span><br><span class="line"><span class="comment">// 1.创建命令</span></span><br><span class="line">RACCommand *command = [[RACCommand alloc] initWithSignalBlock:^RACSignal *(<span class="type">id</span> input) &#123;</span><br><span class="line"><span class="comment">//block调用，执行命令的时候就会调用</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,input); <span class="comment">// input 为执行命令传进来的参数</span></span><br><span class="line"><span class="comment">// 这里的返回值不允许为nil</span></span><br><span class="line"><span class="keyword">return</span> [RACSignal createSignal:^RACDisposable *(<span class="type">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line">[subscriber sendNext:<span class="string">@&quot;执行命令产生的数据&quot;</span>];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;];</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如何拿到执行命令中产生的数据呢？</span></span><br><span class="line"><span class="comment">// 订阅命令内部的信号</span></span><br><span class="line"><span class="comment">// ** 方式一：直接订阅执行命令返回的信号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.执行命令</span></span><br><span class="line">RACSignal *signal =[command execute:@<span class="number">2</span>]; <span class="comment">// 这里其实用到的是replaySubject 可以先发送命令再订阅</span></span><br><span class="line"><span class="comment">// 在这里就可以订阅信号了</span></span><br><span class="line">[signal subscribeNext:^(<span class="type">id</span> x) &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,x);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一般做法</span></span><br><span class="line"><span class="comment">// 1.创建命令</span></span><br><span class="line">RACCommand *command = [[RACCommand alloc] initWithSignalBlock:^RACSignal *(<span class="type">id</span> input) &#123;</span><br><span class="line"><span class="comment">//block调用，执行命令的时候就会调用</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,input); <span class="comment">// input 为执行命令传进来的参数</span></span><br><span class="line"><span class="comment">// 这里的返回值不允许为nil</span></span><br><span class="line"><span class="keyword">return</span> [RACSignal createSignal:^RACDisposable *(<span class="type">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line">[subscriber sendNext:<span class="string">@&quot;执行命令产生的数据&quot;</span>];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;];</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二：</span></span><br><span class="line"><span class="comment">// 订阅信号</span></span><br><span class="line"><span class="comment">// 注意：这里必须是先订阅才能发送命令</span></span><br><span class="line"><span class="comment">// executionSignals：信号源，信号中信号，signalofsignals:信号，发送数据就是信号</span></span><br><span class="line">[command.executionSignals subscribeNext:^(RACSignal *x) &#123;</span><br><span class="line">[x subscribeNext:^(<span class="type">id</span> x) &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">//        NSLog(@&quot;%@&quot;, x);</span></span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.执行命令</span></span><br><span class="line">[command execute:@<span class="number">2</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 高级做法</span></span><br><span class="line"><span class="comment">// 1.创建命令</span></span><br><span class="line">RACCommand *command = [[RACCommand alloc] initWithSignalBlock:^RACSignal *(<span class="type">id</span> input) &#123;</span><br><span class="line"><span class="comment">// block调用：执行命令的时候就会调用</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, input);</span><br><span class="line"><span class="comment">// 这里的返回值不允许为nil</span></span><br><span class="line"><span class="keyword">return</span> [RACSignal createSignal:^RACDisposable *(<span class="type">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line">[subscriber sendNext:<span class="string">@&quot;发送信号&quot;</span>];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;];</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式三</span></span><br><span class="line"><span class="comment">// switchToLatest获取最新发送的信号，只能用于信号中信号。</span></span><br><span class="line">[command.executionSignals.switchToLatest subscribeNext:^(<span class="type">id</span> x) &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">// 2.执行命令</span></span><br><span class="line">[command execute:@<span class="number">3</span>];</span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// switchToLatest--用于信号中信号</span></span><br><span class="line"><span class="comment">// 创建信号中信号</span></span><br><span class="line">RACSubject *signalofsignals = [RACSubject subject];</span><br><span class="line">RACSubject *signalA = [RACSubject subject];</span><br><span class="line"><span class="comment">// 订阅信号</span></span><br><span class="line"><span class="comment">//    [signalofsignals subscribeNext:^(RACSignal *x) &#123;</span></span><br><span class="line"><span class="comment">//        [x subscribeNext:^(id x) &#123;</span></span><br><span class="line"><span class="comment">//            NSLog(@&quot;%@&quot;, x);</span></span><br><span class="line"><span class="comment">//        &#125;];</span></span><br><span class="line"><span class="comment">//    &#125;];</span></span><br><span class="line"><span class="comment">// switchToLatest: 获取信号中信号发送的最新信号</span></span><br><span class="line">[signalofsignals.switchToLatest subscribeNext:^(<span class="type">id</span> x) &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">// 发送信号</span></span><br><span class="line">[signalofsignals sendNext:signalA];</span><br><span class="line">[signalA sendNext:@<span class="number">4</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 监听事件有没有完成</span></span><br><span class="line"><span class="comment">//注意：当前命令内部发送数据完成，一定要主动发送完成</span></span><br><span class="line"><span class="comment">// 1.创建命令</span></span><br><span class="line">RACCommand *command = [[RACCommand alloc] initWithSignalBlock:^RACSignal *(<span class="type">id</span> input) &#123;</span><br><span class="line"><span class="comment">// block调用：执行命令的时候就会调用</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, input);</span><br><span class="line"><span class="comment">// 这里的返回值不允许为nil</span></span><br><span class="line"><span class="keyword">return</span> [RACSignal createSignal:^RACDisposable *(<span class="type">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line"><span class="comment">// 发送数据</span></span><br><span class="line">[subscriber sendNext:<span class="string">@&quot;执行命令产生的数据&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// *** 发送完成 **</span></span><br><span class="line">[subscriber sendCompleted];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;];</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">// 监听事件有没有完成</span></span><br><span class="line">[command.executing subscribeNext:^(<span class="type">id</span> x) &#123;</span><br><span class="line"><span class="keyword">if</span> ([x boolValue] == <span class="literal">YES</span>) &#123; <span class="comment">// 正在执行</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;当前正在执行%@&quot;</span>, x);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 执行完成/没有执行</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;执行完成/没有执行&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.执行命令</span></span><br><span class="line">[command execute:@<span class="number">1</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="RAC常用宏"><a href="#RAC常用宏" class="headerlink" title="RAC常用宏"></a>RAC常用宏</h4><p>RAC有许多强大而方便的宏。如下</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RAC:把一个对象的某个属性绑定一个信号,只要发出信号,就会把信号的内容给对象的属性赋值</span></span><br><span class="line"><span class="comment">// 给label的text属性绑定了文本框改变的信号</span></span><br><span class="line">RAC(<span class="keyword">self</span>.label, text) = <span class="keyword">self</span>.textField.rac_textSignal;</span><br><span class="line"><span class="comment">//    [self.textField.rac_textSignal subscribeNext:^(id x) &#123;</span></span><br><span class="line"><span class="comment">//        self.label.text = x;</span></span><br><span class="line"><span class="comment">//    &#125;];</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  KVO</span></span><br><span class="line"><span class="comment">*  RACObserveL:快速的监听某个对象的某个属性改变</span></span><br><span class="line"><span class="comment">*  返回的是一个信号,对象的某个属性改变的信号</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">[RACObserve(<span class="keyword">self</span>.view, center) subscribeNext:^(<span class="type">id</span> x) &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例 textField输入的值赋值给label，监听label文字改变,</span></span><br><span class="line">RAC(<span class="keyword">self</span>.label, text) = <span class="keyword">self</span>.textField.rac_textSignal;</span><br><span class="line">[RACObserve(<span class="keyword">self</span>.label, text) subscribeNext:^(<span class="type">id</span> x) &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;====label的文字变了&quot;</span>);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  循环引用问题</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">@weakify(<span class="keyword">self</span>)</span><br><span class="line">RACSignal *signal = [RACSignal createSignal:^RACDisposable *(<span class="type">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line">@strongify(<span class="keyword">self</span>)</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,<span class="keyword">self</span>.view);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;];</span><br><span class="line">_signal = signal;</span><br><span class="line">使用 @weakify(<span class="keyword">self</span>)和@strongify(<span class="keyword">self</span>)来避免循环引用</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 元祖</span></span><br><span class="line"><span class="comment">* 快速包装一个元组</span></span><br><span class="line"><span class="comment">* 把包装的类型放在宏的参数里面,就会自动包装</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">RACTuple *tuple = RACTuplePack(@<span class="number">1</span>,@<span class="number">2</span>,@<span class="number">4</span>);</span><br><span class="line"><span class="comment">// 宏的参数类型要和元祖中元素类型一致， 右边为要解析的元祖。</span></span><br><span class="line">RACTupleUnpack_(<span class="built_in">NSNumber</span> *num1, <span class="built_in">NSNumber</span> *num2, <span class="built_in">NSNumber</span> * num3) = tuple;<span class="comment">// 4.元祖</span></span><br><span class="line"><span class="comment">// 快速包装一个元组</span></span><br><span class="line"><span class="comment">// 把包装的类型放在宏的参数里面,就会自动包装</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@ %@ %@&quot;</span>, num1, num2, num3);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="RAC-bind"><a href="#RAC-bind" class="headerlink" title="RAC-bind"></a>RAC-bind</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.创建信号</span></span><br><span class="line">RACSubject *subject = [RACSubject subject];</span><br><span class="line"><span class="comment">// 2.绑定信号</span></span><br><span class="line">RACSignal *bindSignal = [subject bind:^RACStreamBindBlock&#123;</span><br><span class="line"><span class="comment">// block调用时刻：只要绑定信号订阅就会调用。不做什么事情，</span></span><br><span class="line"><span class="keyword">return</span> ^RACSignal *(<span class="type">id</span> value, <span class="type">BOOL</span> *stop)&#123;</span><br><span class="line"><span class="comment">// 一般在这个block中做事 ，发数据的时候会来到这个block。</span></span><br><span class="line"><span class="comment">// 只要源信号（subject）发送数据，就会调用block</span></span><br><span class="line"><span class="comment">// block作用：处理源信号内容</span></span><br><span class="line"><span class="comment">// value:源信号发送的内容，</span></span><br><span class="line">value = @<span class="number">3</span>; <span class="comment">// 如果在这里把value的值改了，那么订阅绑定信号的值即44行的x就变了</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;接受到源信号的内容：%@&quot;</span>, value);</span><br><span class="line"><span class="comment">//返回信号，不能为nil,如果非要返回空---则empty或 alloc init。</span></span><br><span class="line"><span class="keyword">return</span> [RACReturnSignal <span class="keyword">return</span>:value]; <span class="comment">// 把返回的值包装成信号</span></span><br><span class="line">&#125;;</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.订阅绑定信号</span></span><br><span class="line">[bindSignal subscribeNext:^(<span class="type">id</span> x) &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;接收到绑定信号处理完的信号:%@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">// 4.发送信号</span></span><br><span class="line">[subject sendNext:<span class="string">@&quot;123&quot;</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>总结</li>
<li>bind（绑定）的使用思想和Hook的一样—&gt; 都是拦截API从而可以对数据进行操作，，而影响返回数据。</li>
<li>发送信号的时候会来到30行的block。在这个block里我们可以对数据进行一些操作，那么35行打印的value和订阅绑定信号后的value就会变了。变成什么样随你喜欢喽。</li>
</ul>
<h4 id="RAC-过滤"><a href="#RAC-过滤" class="headerlink" title="RAC-过滤"></a>RAC-过滤</h4><ul>
<li>有时候我们想要过滤一些信号，这时候我们便可以用RAC的过滤方法。过滤方法有好多种，如下代码，从不同情况下进行了分析。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 跳跃 ： 如下，skip传入2 跳过前面两个值</span></span><br><span class="line"><span class="comment">// 实际用处： 在实际开发中比如 后台返回的数据前面几个没用，我们想跳跃过去，便可以用skip</span></span><br><span class="line">RACSubject *subject = [RACSubject subject];</span><br><span class="line">[[subject skip:<span class="number">2</span>] subscribeNext:^(<span class="type">id</span> x) &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line">[subject sendNext:@<span class="number">1</span>];</span><br><span class="line">[subject sendNext:@<span class="number">2</span>];</span><br><span class="line">[subject sendNext:@<span class="number">3</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//distinctUntilChanged:-- 如果当前的值跟上一次的值一样，就不会被订阅到</span></span><br><span class="line">RACSubject *subject = [RACSubject subject];</span><br><span class="line">[[subject distinctUntilChanged] subscribeNext:^(<span class="type">id</span> x) &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">// 发送信号</span></span><br><span class="line">[subject sendNext:@<span class="number">1</span>];</span><br><span class="line">[subject sendNext:@<span class="number">2</span>];</span><br><span class="line">[subject sendNext:@<span class="number">2</span>]; <span class="comment">// 不会被订阅</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// take:可以屏蔽一些值,去掉前面几个值---这里take为2 则只拿到前两个值</span></span><br><span class="line">RACSubject *subject = [RACSubject subject];</span><br><span class="line">[[subject take:<span class="number">2</span>] subscribeNext:^(<span class="type">id</span> x) &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">// 发送信号</span></span><br><span class="line">[subject sendNext:@<span class="number">1</span>];</span><br><span class="line">[subject sendNext:@<span class="number">2</span>];</span><br><span class="line">[subject sendNext:@<span class="number">3</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//takeLast:和take的用法一样，不过他取的是最后的几个值，如下，则取的是最后两个值</span></span><br><span class="line"><span class="comment">//注意点:takeLast 一定要调用sendCompleted，告诉他发送完成了，这样才能取到最后的几个值</span></span><br><span class="line">RACSubject *subject = [RACSubject subject];</span><br><span class="line">[[subject takeLast:<span class="number">2</span>] subscribeNext:^(<span class="type">id</span> x) &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">// 发送信号</span></span><br><span class="line">[subject sendNext:@<span class="number">1</span>];</span><br><span class="line">[subject sendNext:@<span class="number">2</span>];</span><br><span class="line">[subject sendNext:@<span class="number">3</span>];</span><br><span class="line">[subject sendCompleted];</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// takeUntil:---给takeUntil传的是哪个信号，那么当这个信号发送信号或sendCompleted，就不能再接受源信号的内容了。</span></span><br><span class="line">RACSubject *subject = [RACSubject subject];</span><br><span class="line">RACSubject *subject2 = [RACSubject subject];</span><br><span class="line">[[subject takeUntil:subject2] subscribeNext:^(<span class="type">id</span> x) &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">// 发送信号</span></span><br><span class="line">[subject sendNext:@<span class="number">1</span>];</span><br><span class="line">[subject sendNext:@<span class="number">2</span>];</span><br><span class="line">[subject2 sendNext:@<span class="number">3</span>];  <span class="comment">// 1</span></span><br><span class="line"><span class="comment">//    [subject2 sendCompleted]; // 或2</span></span><br><span class="line">[subject sendNext:@<span class="number">4</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ignore: 忽略掉一些值</span></span><br><span class="line"><span class="comment">//ignore:忽略一些值</span></span><br><span class="line"><span class="comment">//ignoreValues:表示忽略所有的值</span></span><br><span class="line"><span class="comment">// 1.创建信号</span></span><br><span class="line">RACSubject *subject = [RACSubject subject];</span><br><span class="line"><span class="comment">// 2.忽略一些值</span></span><br><span class="line">RACSignal *ignoreSignal = [subject ignore:@<span class="number">2</span>]; <span class="comment">// ignoreValues:表示忽略所有的值</span></span><br><span class="line"><span class="comment">// 3.订阅信号</span></span><br><span class="line">[ignoreSignal subscribeNext:^(<span class="type">id</span> x) &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">// 4.发送数据</span></span><br><span class="line">[subject sendNext:@<span class="number">2</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一般和文本框一起用，添加过滤条件</span></span><br><span class="line"><span class="comment">// 只有当文本框的内容长度大于5，才获取文本框里的内容</span></span><br><span class="line">[[<span class="keyword">self</span>.textField.rac_textSignal filter:^<span class="type">BOOL</span>(<span class="type">id</span> value) &#123;</span><br><span class="line"><span class="comment">// value 源信号的内容</span></span><br><span class="line"><span class="keyword">return</span> [value length] &gt; <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 返回值 就是过滤条件。只有满足这个条件才能获取到内容</span></span><br><span class="line">&#125;] subscribeNext:^(<span class="type">id</span> x) &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="RAC-映射"><a href="#RAC-映射" class="headerlink" title="RAC-映射"></a>RAC-映射</h4><ul>
<li>RAC的映射在实际开发中有什么用呢？比如我们想要拦截服务器返回的数据，给数据拼接特定的东西或想对数据进行操作从而更改返回值，类似于这样的情况下，我们便可以考虑用RAC的映射，实例代码如下</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="type">void</span>)map &#123;</span><br><span class="line"><span class="comment">// 创建信号</span></span><br><span class="line">RACSubject *subject = [RACSubject subject];</span><br><span class="line"><span class="comment">// 绑定信号</span></span><br><span class="line">RACSignal *bindSignal = [subject map:^<span class="type">id</span>(<span class="type">id</span> value) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回的类型就是你需要映射的值</span></span><br><span class="line"><span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;ws:%@&quot;</span>, value]; <span class="comment">//这里将源信号发送的“123” 前面拼接了ws：</span></span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">// 订阅绑定信号</span></span><br><span class="line">[bindSignal subscribeNext:^(<span class="type">id</span> x) &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">// 发送信号</span></span><br><span class="line">[subject sendNext:<span class="string">@&quot;123&quot;</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="type">void</span>)flatMap &#123;</span><br><span class="line"><span class="comment">// 创建信号</span></span><br><span class="line">RACSubject *subject = [RACSubject subject];</span><br><span class="line"><span class="comment">// 绑定信号</span></span><br><span class="line">RACSignal *bindSignal = [subject flattenMap:^RACStream *(<span class="type">id</span> value) &#123;</span><br><span class="line"><span class="comment">// block：只要源信号发送内容就会调用</span></span><br><span class="line"><span class="comment">// value: 就是源信号发送的内容</span></span><br><span class="line"><span class="comment">// 返回信号用来包装成修改内容的值</span></span><br><span class="line"><span class="keyword">return</span> [RACReturnSignal <span class="keyword">return</span>:value];</span><br><span class="line"></span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// flattenMap中返回的是什么信号，订阅的就是什么信号(那么，x的值等于value的值，如果我们操纵value的值那么x也会随之而变)</span></span><br><span class="line"><span class="comment">// 订阅信号</span></span><br><span class="line">[bindSignal subscribeNext:^(<span class="type">id</span> x) &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送数据</span></span><br><span class="line">[subject sendNext:<span class="string">@&quot;123&quot;</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="type">void</span>)flattenMap2 &#123;</span><br><span class="line"><span class="comment">// flattenMap 主要用于信号中的信号</span></span><br><span class="line"><span class="comment">// 创建信号</span></span><br><span class="line">RACSubject *signalofSignals = [RACSubject subject];</span><br><span class="line">RACSubject *signal = [RACSubject subject];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅信号</span></span><br><span class="line"><span class="comment">//方式1</span></span><br><span class="line"><span class="comment">//    [signalofSignals subscribeNext:^(id x) &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        [x subscribeNext:^(id x) &#123;</span></span><br><span class="line"><span class="comment">//            NSLog(@&quot;%@&quot;, x);</span></span><br><span class="line"><span class="comment">//        &#125;];</span></span><br><span class="line"><span class="comment">//    &#125;];</span></span><br><span class="line"><span class="comment">// 方式2</span></span><br><span class="line"><span class="comment">//    [signalofSignals.switchToLatest  ];</span></span><br><span class="line"><span class="comment">// 方式3</span></span><br><span class="line"><span class="comment">//   RACSignal *bignSignal = [signalofSignals flattenMap:^RACStream *(id value) &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //value:就是源信号发送内容</span></span><br><span class="line"><span class="comment">//        return value;</span></span><br><span class="line"><span class="comment">//    &#125;];</span></span><br><span class="line"><span class="comment">//    [bignSignal subscribeNext:^(id x) &#123;</span></span><br><span class="line"><span class="comment">//        NSLog(@&quot;%@&quot;, x);</span></span><br><span class="line"><span class="comment">//    &#125;];</span></span><br><span class="line"><span class="comment">// 方式4--------也是开发中常用的</span></span><br><span class="line">[[signalofSignals flattenMap:^RACStream *(<span class="type">id</span> value) &#123;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;] subscribeNext:^(<span class="type">id</span> x) &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送信号</span></span><br><span class="line">[signalofSignals sendNext:signal];</span><br><span class="line">[signal sendNext:<span class="string">@&quot;123&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="RAC-组合"><a href="#RAC-组合" class="headerlink" title="RAC-组合"></a>RAC-组合</h4><ul>
<li>把多个信号聚合成你想要的信号,使用场景—-：比如-当多个输入框都有值的时候按钮才可点击。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 思路--- 就是把输入框输入值的信号都聚合成按钮是否能点击的信号。</span></span><br><span class="line">- (<span class="type">void</span>)combineLatest &#123;</span><br><span class="line"></span><br><span class="line">RACSignal *combinSignal = [RACSignal combineLatest:@[<span class="keyword">self</span>.accountField.rac_textSignal, <span class="keyword">self</span>.pwdField.rac_textSignal] reduce:^<span class="type">id</span>(<span class="built_in">NSString</span> *account, <span class="built_in">NSString</span> *pwd)&#123; <span class="comment">//reduce里的参数一定要和combineLatest数组里的一一对应。</span></span><br><span class="line"><span class="comment">// block: 只要源信号发送内容，就会调用，组合成一个新值。</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@ %@&quot;</span>, account, pwd);</span><br><span class="line"><span class="keyword">return</span> @(account.length &amp;&amp; pwd.length);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">//    // 订阅信号</span></span><br><span class="line"><span class="comment">//    [combinSignal subscribeNext:^(id x) &#123;</span></span><br><span class="line"><span class="comment">//        self.loginBtn.enabled = [x boolValue];</span></span><br><span class="line"><span class="comment">//    &#125;];    // ----这样写有些麻烦，可以直接用RAC宏</span></span><br><span class="line">RAC(<span class="keyword">self</span>.loginBtn, enabled) = combinSignal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="type">void</span>)zipWith &#123;</span><br><span class="line"><span class="comment">//zipWith:把两个信号压缩成一个信号，只有当两个信号同时发出信号内容时，并且把两个信号的内容合并成一个元祖，才会触发压缩流的next事件。</span></span><br><span class="line"><span class="comment">// 创建信号A</span></span><br><span class="line">RACSubject *signalA = [RACSubject subject];</span><br><span class="line"><span class="comment">// 创建信号B</span></span><br><span class="line">RACSubject *signalB = [RACSubject subject];</span><br><span class="line"><span class="comment">// 压缩成一个信号</span></span><br><span class="line"><span class="comment">// **-zipWith-**: 当一个界面多个请求的时候，要等所有请求完成才更新UI</span></span><br><span class="line"><span class="comment">// 等所有信号都发送内容的时候才会调用</span></span><br><span class="line">RACSignal *zipSignal = [signalA zipWith:signalB];</span><br><span class="line">[zipSignal subscribeNext:^(<span class="type">id</span> x) &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, x); <span class="comment">//所有的值都被包装成了元组</span></span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送信号 交互顺序，元组内元素的顺序不会变，跟发送的顺序无关，而是跟压缩的顺序有关[signalA zipWith:signalB]---先是A后是B</span></span><br><span class="line">[signalA sendNext:@<span class="number">1</span>];</span><br><span class="line">[signalB sendNext:@<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 任何一个信号请求完成都会被订阅到</span></span><br><span class="line"><span class="comment">// merge:多个信号合并成一个信号，任何一个信号有新值就会调用</span></span><br><span class="line">- (<span class="type">void</span>)merge &#123;</span><br><span class="line"><span class="comment">// 创建信号A</span></span><br><span class="line">RACSubject *signalA = [RACSubject subject];</span><br><span class="line"><span class="comment">// 创建信号B</span></span><br><span class="line">RACSubject *signalB = [RACSubject subject];</span><br><span class="line"><span class="comment">//组合信号</span></span><br><span class="line">RACSignal *mergeSignal = [signalA merge:signalB];</span><br><span class="line"><span class="comment">// 订阅信号</span></span><br><span class="line">[mergeSignal subscribeNext:^(<span class="type">id</span> x) &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">// 发送信号---交换位置则数据结果顺序也会交换</span></span><br><span class="line">[signalB sendNext:<span class="string">@&quot;下部分&quot;</span>];</span><br><span class="line">[signalA sendNext:<span class="string">@&quot;上部分&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// then --- 使用需求：有两部分数据：想让上部分先进行网络请求但是过滤掉数据，然后进行下部分的，拿到下部分数据</span></span><br><span class="line">- (<span class="type">void</span>)then &#123;</span><br><span class="line"><span class="comment">// 创建信号A</span></span><br><span class="line">RACSignal *signalA = [RACSignal createSignal:^RACDisposable *(<span class="type">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;----发送上部分请求---afn&quot;</span>);</span><br><span class="line"></span><br><span class="line">[subscriber sendNext:<span class="string">@&quot;上部分数据&quot;</span>];</span><br><span class="line">[subscriber sendCompleted]; <span class="comment">// 必须要调用sendCompleted方法！</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建信号B，</span></span><br><span class="line">RACSignal *signalsB = [RACSignal createSignal:^RACDisposable *(<span class="type">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;--发送下部分请求--afn&quot;</span>);</span><br><span class="line">[subscriber sendNext:<span class="string">@&quot;下部分数据&quot;</span>];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">// 创建组合信号</span></span><br><span class="line"><span class="comment">// then;忽略掉第一个信号的所有值</span></span><br><span class="line">RACSignal *thenSignal = [signalA then:^RACSignal *&#123;</span><br><span class="line"><span class="comment">// 返回的信号就是要组合的信号</span></span><br><span class="line"><span class="keyword">return</span> signalsB;</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅信号</span></span><br><span class="line">[thenSignal subscribeNext:^(<span class="type">id</span> x) &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// concat----- 使用需求：有两部分数据：想让上部分先执行，完了之后再让下部分执行（都可获取值）</span></span><br><span class="line">- (<span class="type">void</span>)concat &#123;</span><br><span class="line"><span class="comment">// 组合</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建信号A</span></span><br><span class="line">RACSignal *signalA = [RACSignal createSignal:^RACDisposable *(<span class="type">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line"><span class="comment">//        NSLog(@&quot;----发送上部分请求---afn&quot;);</span></span><br><span class="line"></span><br><span class="line">[subscriber sendNext:<span class="string">@&quot;上部分数据&quot;</span>];</span><br><span class="line">[subscriber sendCompleted]; <span class="comment">// 必须要调用sendCompleted方法！</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建信号B，</span></span><br><span class="line">RACSignal *signalsB = [RACSignal createSignal:^RACDisposable *(<span class="type">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line"><span class="comment">//        NSLog(@&quot;--发送下部分请求--afn&quot;);</span></span><br><span class="line">[subscriber sendNext:<span class="string">@&quot;下部分数据&quot;</span>];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// concat:按顺序去链接</span></span><br><span class="line"><span class="comment">//**-注意-**：concat，第一个信号必须要调用sendCompleted</span></span><br><span class="line"><span class="comment">// 创建组合信号</span></span><br><span class="line">RACSignal *concatSignal = [signalA concat:signalsB];</span><br><span class="line"><span class="comment">// 订阅组合信号</span></span><br><span class="line">[concatSignal subscribeNext:^(<span class="type">id</span> x) &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,x);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="RAC-MVVM-网络请求"><a href="#RAC-MVVM-网络请求" class="headerlink" title="RAC+MVVM-网络请求"></a>RAC+MVVM-网络请求</h4><p><a href="https://github.com/shenhongkai/myStudy/tree/master/RAC%2BMVVM">请看demo</a></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>RAC,MVVM</tag>
      </tags>
  </entry>
</search>
